type Amenity {
  id: UUID!

  name: String!

  provider: String

  category: String!

  unitId: UUID

  createdAt: Time

  updatedAt: Time
}

type AnyUpload {
  id: UUID!

  upload: String!

  category: String!

  propertyId: UUID

  userId: UUID

  unitId: UUID

  createdAt: Time

  updatedAt: Time
}

type Bedroom {
  id: UUID!

  propertyUnitId: UUID!

  bedroomNumber: Int!

  enSuite: Boolean!

  master: Boolean!

  createdAt: Time

  updatedAt: Time
}

type Caretaker {
  id: UUID!

  first_name: String!

  last_name: String!

  phone: String!

  avatar: AnyUpload

  verified: Boolean!

  properties: [Property!]!

  createdAt: Time

  updatedAt: Time
}

input CaretakerInput {
  first_name: String!

  last_name: String!

  phone: String!

  image: String!
}

input CaretakerVerificationInput {
  phone: String!

  verifyCode: String!
}

enum CountryCode {
  KE
}

input CreatePaymentInput {
  phone: String!

  amount: String!
}

type Gps {
  lat: Float!

  lng: Float!
}

input GpsInput {
  lat: Float!

  lng: Float!
}

input HandshakeInput {
  phone: String!
}

type Invoice {
  id: UUID!

  msid: String!

  phone: String!

  status: InvoiceStatus!

  wCoCheckoutId: String!

  createdAt: Time

  updatedAt: Time
}

enum InvoiceStatus {
  PROCESSED

  PROCESSING
}

type ListingOverview {
  occupiedUnits: Int!

  vacantUnits: Int!

  totalUnits: Int!
}

type Mutation {
  signIn(input: NewUser!): SignInResponse!

  createProperty(input: NewProperty!): Property!

  addUnit(input: UnitInput!): Unit!

  addUnitTenant(input: TenancyInput!): Tenant!

  uploadImage(file: Upload!): String!

  sendVerificationCode(input: VerificationInput!): Status!

  verifyUserVerificationCode(input: UserVerificationInput!): Status!

  verifyCaretakerVerificationCode(input: CaretakerVerificationInput!): Status!

  handshake(input: HandshakeInput!): User!

  saveMailing(email: String): Status!

  createPayment(input: CreatePaymentInput!): Status!

  updateUserInfo(firstName: String!, lastName: String!, avatar: String!): User!
}

input NearByUnitsInput {
  gps: GpsInput!
}

input NewProperty {
  name: String!

  type: String!

  location: GpsInput!

  thumbnail: String!

  isCaretaker: Boolean!

  caretaker: CaretakerInput
}

input NewUser {
  phone: String!
}

type Property {
  id: UUID!

  name: String!

  type: PropertyType!

  location: Gps

  thumbnail: AnyUpload

  units: [Unit!]!

  createdBy: UUID!

  caretaker: Caretaker

  caretakerId: UUID

  owner: User

  createdAt: Time

  updatedAt: Time
}

enum PropertyType {
  APARTMENTS_BUILDING

  APARTMENT
}

type Query {
  getUser: User!

  getProperty(id: UUID!): Property!

  hello: String!

  searchTown(town: String!): [Town!]!

  getTowns: [Town!]!

  getUnits(propertyId: UUID!): [Unit!]!

  getPropertyTenancy(propertyId: UUID!): [Tenant!]!

  getUserProperties: [Property!]!

  listingOverview(propertyId: UUID!): ListingOverview!

  refreshToken: SignInResponse!

  getNearByUnits(input: NearByUnitsInput!): [Unit!]!

  getUnit(id: UUID!): Unit!
}

type Shoot {
  id: UUID!

  propertyId: String!

  date: Time!

  status: String!

  createdAt: Time

  updatedAt: Time
}

input ShootInput {
  date: Time!
}

enum ShootStatus {
  PENDING

  DONE
}

type SignInResponse {
  user: User!

  Token: String!
}

type Status {
  success: String!
}

input TenancyInput {
  startDate: Time!

  userId: UUID!

  unitId: UUID!
}

type Tenant {
  id: UUID!

  startDate: Time!

  endDate: Time

  unitId: UUID!

  userId: UUID!

  user: User!

  unit: Unit

  createdAt: Time

  updatedAt: Time
}

scalar Time

type Token {
  token: String!
}

type Town {
  id: ID!

  town: String!

  postalCode: String!
}

scalar UUID

type Unit {
  id: UUID!

  name: String!

  bedrooms: [Bedroom!]!

  propertyId: UUID!

  location: Gps

  caretakerId: UUID

  caretaker: Caretaker

  property: Property

  tenant: Tenant

  distance: String

  price: String!

  createdBy: UUID

  owner: User

  bathrooms: Int!

  amenities: [Amenity!]!

  state: UnitState!

  type: String!

  images: [AnyUpload!]!

  tenancy: [Tenant!]!

  createdAt: Time

  updatedAt: Time
}

input UnitAmenityInput {
  name: String!

  category: String!
}

input UnitBedroomInput {
  bedroomNumber: Int!

  enSuite: Boolean!

  master: Boolean!
}

input UnitInput {
  propertyId: UUID

  baths: Int!

  name: String!

  type: String!

  state: UnitState!

  isCaretaker: Boolean

  location: GpsInput

  caretaker: CaretakerInput

  amenities: [UnitAmenityInput!]!

  bedrooms: [UnitBedroomInput!]!

  price: String!

  uploads: [UploadImages!]
}

enum UnitState {
  VACANT

  OCCUPIED

  UNAVAILABLE
}

scalar Upload

enum UploadCategory {
  PROFILE_IMG

  UNIT_IMAGES

  PROPERTY_THUMBNAIL
}

input UploadImages {
  image: String!

  category: String!
}

type User {
  id: UUID!

  first_name: String

  last_name: String

  phone: String!

  is_landlord: Boolean!

  avatar: AnyUpload

  subscribe_retries: Int!

  properties: [Property!]!

  units: [Unit!]!

  tenancy: [Tenant!]!

  createdAt: Time

  updatedAt: Time
}

input UserVerificationInput {
  phone: String!

  verifyCode: String!
}

input VerificationInput {
  phone: String!

  verifyCode: String
}

# See https://github.com/JetBrains/js-graphql-intellij-plugin/issues/665
# noinspection GraphQLTypeRedefinition
type __Directive {
  name: String!

  description: String

  locations: [__DirectiveLocation!]!

  args: [__InputValue!]!

  isRepeatable: Boolean!
}

# See https://github.com/JetBrains/js-graphql-intellij-plugin/issues/665
# noinspection GraphQLTypeRedefinition
enum __DirectiveLocation {
  QUERY

  MUTATION

  SUBSCRIPTION

  FIELD

  FRAGMENT_DEFINITION

  FRAGMENT_SPREAD

  INLINE_FRAGMENT

  VARIABLE_DEFINITION

  SCHEMA

  SCALAR

  OBJECT

  FIELD_DEFINITION

  ARGUMENT_DEFINITION

  INTERFACE

  UNION

  ENUM

  ENUM_VALUE

  INPUT_OBJECT

  INPUT_FIELD_DEFINITION
}

# See https://github.com/JetBrains/js-graphql-intellij-plugin/issues/665
# noinspection GraphQLTypeRedefinition
type __EnumValue {
  name: String!

  description: String

  isDeprecated: Boolean!

  deprecationReason: String
}

# See https://github.com/JetBrains/js-graphql-intellij-plugin/issues/665
# noinspection GraphQLTypeRedefinition
type __Field {
  name: String!

  description: String

  args: [__InputValue!]!

  type: __Type!

  isDeprecated: Boolean!

  deprecationReason: String
}

# See https://github.com/JetBrains/js-graphql-intellij-plugin/issues/665
# noinspection GraphQLTypeRedefinition
type __InputValue {
  name: String!

  description: String

  type: __Type!

  defaultValue: String
}

# See https://github.com/JetBrains/js-graphql-intellij-plugin/issues/665
# noinspection GraphQLTypeRedefinition
type __Schema {
  description: String

  types: [__Type!]!

  queryType: __Type!

  mutationType: __Type

  subscriptionType: __Type

  directives: [__Directive!]!
}

# See https://github.com/JetBrains/js-graphql-intellij-plugin/issues/665
# noinspection GraphQLTypeRedefinition
type __Type {
  kind: __TypeKind!

  name: String

  description: String

  fields(includeDeprecated: Boolean = false): [__Field!]

  interfaces: [__Type!]

  possibleTypes: [__Type!]

  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]

  inputFields: [__InputValue!]

  ofType: __Type

  specifiedByURL: String
}

# See https://github.com/JetBrains/js-graphql-intellij-plugin/issues/665
# noinspection GraphQLTypeRedefinition
enum __TypeKind {
  SCALAR

  OBJECT

  INTERFACE

  UNION

  ENUM

  INPUT_OBJECT

  LIST

  NON_NULL
}

"""
The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.
"""
directive @defer (if: Boolean = true, label: String) on FRAGMENT_SPREAD|INLINE_FRAGMENT

# See https://github.com/JetBrains/js-graphql-intellij-plugin/issues/665
# noinspection GraphQLTypeRedefinition
"""
The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.
"""
directive @deprecated (reason: String = "No longer supported") on FIELD_DEFINITION|ARGUMENT_DEFINITION|INPUT_FIELD_DEFINITION|ENUM_VALUE

# See https://github.com/JetBrains/js-graphql-intellij-plugin/issues/665
# noinspection GraphQLTypeRedefinition
"""
The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.
"""
directive @include (if: Boolean!) on FIELD|FRAGMENT_SPREAD|INLINE_FRAGMENT

# See https://github.com/JetBrains/js-graphql-intellij-plugin/issues/665
# noinspection GraphQLTypeRedefinition
"""
The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.
"""
directive @skip (if: Boolean!) on FIELD|FRAGMENT_SPREAD|INLINE_FRAGMENT

# See https://github.com/JetBrains/js-graphql-intellij-plugin/issues/665
# noinspection GraphQLTypeRedefinition
"""
The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.
"""
directive @specifiedBy (url: String!) on SCALAR

schema {
  query: Query
  mutation: Mutation
}
